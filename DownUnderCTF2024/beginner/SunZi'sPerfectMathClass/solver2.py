import gmpy2

e = 3

c_1 = 105001824161664003599422656864176455171381720653815905925856548632486703162518989165039084097502312226864233302621924809266126953771761669365659646250634187967109683742983039295269237675751525196938138071285014551966913785883051544245059293702943821571213612968127810604163575545004589035344590577094378024637

c_2 = 31631442837619174301627703920800905351561747632091670091370206898569727230073839052473051336225502632628636256671728802750596833679629890303700500900722642779064628589492559614751281751964622696427520120657753178654351971238020964729065716984136077048928869596095134253387969208375978930557763221971977878737

c_3 = 64864977037231624991423831965394304787965838591735479931470076118956460041888044329021534008265748308238833071879576193558419510910272917201870797698253331425756509041685848066195410586013190421426307862029999566951239891512032198024716311786896333047799598891440799810584167402219122283692655717691362258659

n_1 = 147896270072551360195753454363282299426062485174745759351211846489928910241753224819735285744845837638083944350358908785909584262132415921461693027899236186075383010852224067091477810924118719861660629389172820727449033189259975221664580227157731435894163917841980802021068840549853299166437257181072372761693

n_2 = 95979365485314068430194308015982074476106529222534317931594712046922760584774363858267995698339417335986543347292707495833182921439398983540425004105990583813113065124836795470760324876649225576921655233346630422669551713602423987793822459296761403456611062240111812805323779302474406733327110287422659815403

n_3 = 95649308318281674792416471616635514342255502211688462925255401503618542159533496090638947784818456347896833168508179425853277740290242297445486511810651365722908240687732315319340403048931123530435501371881740859335793804194315675972192649001074378934213623075830325229416830786633930007188095897620439987817

def gcd(a, b):
    #最大公約数を求めます
    if b == 0:
        return a
    else:
        return gcd(b, a%b)

def extgcd(a, b):
    #拡張ユークリッド互除法
    #ax + by = gcd(a, b)となる(x, y)を求めます
    if b == 0:
        return [1, 0]
    if a == 0:
        return [0, 1]

    q = a//b
    r = a%b

    s, t = extgcd(b, r)
    y = s - q*t
    return [t, y]

def crt(rs, ms):
    #中国剰余定理を計算します
    R = 0
    M = 1
    for r, m in zip(rs, ms):
        g = gcd(M, m)

        assert r%g == R%g
        s, _ = extgcd(M, m)

        lcm = m*M // g
        R += (r - R)//g * M * s
        R %= lcm
        M = lcm
    return [R, M]

def e_rooti(a, e):
    # rのe乗根の切り落としを計算します
    ok = 0
    ng = a
    while ng - ok > 1:
        mid = (ok+ng) >> 1
        if mid**e <= a:
            ok = mid
        else:
            ng = mid
    return ok

def hastad_broadcast_attack(e, pairs):
    #e:公開鍵のe, pairs: (c, N)暗号文とNのペアです
    rs, ms = zip(*pairs)
    r, _ = crt(rs, ms)
    return e_rooti(r, e)

pairs = [(c_1,n_1),(c_2,n_2),(c_3,n_3)]
m = hastad_broadcast_attack(e, pairs)

print(m.to_bytes(80, 'big'))

b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00DUCTF{btw_y0u_c4n_als0_us3_CRT_f0r_p4rt14l_fr4ct10ns}'